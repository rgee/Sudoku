Screw.Unit(function(){
	describe('solver', function(){
		var slv;
		before(function(){
			slv = Solver(GameBoard());
		});
		describe('#eliminateGroups', function(){
			describe('when there is a triple in a row', function(){
				before(function(){
					slv.internalRepr = [[[2,3,4],[2,3,4],[2,3,4],[2,3,4,5],[],[],[],[],[]],
								[[],[],[],[],[],[],[],[],[]],
								[[],[],[],[],[],[],[],[],[]],
								[[],[],[],[],[],[],[],[],[]],
								[[],[],[],[],[],[],[],[],[]],
								[[],[],[],[],[],[],[],[],[]],
								[[],[],[],[],[],[],[],[],[]],
								[[],[],[],[],[],[],[],[],[]],
								[[],[],[],[],[],[],[],[],[]]];
				});
				it("eliminates possibilities conflicting with the triple in the row",function(){
					slv.eliminateTriples();
					var target = [[[2,3,4],[2,3,4],[2,3,4],[5],[],[],[],[],[]],
									[[],[],[],[],[],[],[],[],[]],
									[[],[],[],[],[],[],[],[],[]],
									[[],[],[],[],[],[],[],[],[]],
									[[],[],[],[],[],[],[],[],[]],
									[[],[],[],[],[],[],[],[],[]],
									[[],[],[],[],[],[],[],[],[]],
									[[],[],[],[],[],[],[],[],[]],
									[[],[],[],[],[],[],[],[],[]]];
					expect(slv.internalRepr).to(array_eq, target);
				});
			});
			describe('when there is a pair in a row', function(){
				before(function(){
					slv.internalRepr = [[[2,3],[2,3],[2,3,7],[],[],[],[],[],[]],
								[[],[],[],[],[],[],[],[],[]],
								[[],[],[],[],[],[],[],[],[]],
								[[],[],[],[],[],[],[],[],[]],
								[[],[],[],[],[],[],[],[],[]],
								[[],[],[],[],[],[],[],[],[]],
								[[],[],[],[],[],[],[],[],[]],
								[[],[],[],[],[],[],[],[],[]],
								[[],[],[],[],[],[],[],[],[]]];
 				});
 				it("eliminates possibilities conflicting with the pair in the row", function(){
 					slv.eliminatePairs();
					var target = [[[2,3],[2,3],[7],[],[],[],[],[],[]],
									[[],[],[],[],[],[],[],[],[]],
									[[],[],[],[],[],[],[],[],[]],
									[[],[],[],[],[],[],[],[],[]],
									[[],[],[],[],[],[],[],[],[]],
									[[],[],[],[],[],[],[],[],[]],
									[[],[],[],[],[],[],[],[],[]],
									[[],[],[],[],[],[],[],[],[]],
									[[],[],[],[],[],[],[],[],[]]];
					expect(slv.internalRepr).to(array_eq, target);
				});
			});
			describe('when there is a pair in a column', function(){
				before(function(){
					slv.internalRepr = [[[2,3],[],[],[],[],[],[],[],[]],
										[[2,3],[],[],[],[],[],[],[],[]],
										[[2,3,7],[],[],[],[],[],[],[],[]],
										[[],[],[],[],[],[],[],[],[]],
										[[],[],[],[],[],[],[],[],[]],
										[[],[],[],[],[],[],[],[],[]],
										[[],[],[],[],[],[],[],[],[]],
										[[],[],[],[],[],[],[],[],[]],
										[[],[],[],[],[],[],[],[],[]]];
				});
				it("eliminates possibilities conflicting with the pair in the column", function(){
 					slv.eliminatePairs();
					var target = [[[2,3],[],[],[],[],[],[],[],[]],
									[[2,3],[],[],[],[],[],[],[],[]],
									[[7],[],[],[],[],[],[],[],[]],
									[[],[],[],[],[],[],[],[],[]],
									[[],[],[],[],[],[],[],[],[]],
									[[],[],[],[],[],[],[],[],[]],
									[[],[],[],[],[],[],[],[],[]],
									[[],[],[],[],[],[],[],[],[]],
									[[],[],[],[],[],[],[],[],[]]];
					expect(slv.internalRepr).to(array_eq, target);
				});
			});
			describe('when there is no pair', function(){
				before(function(){
					slv.internalRepr = [[[2,3],[],[],[],[],[],[],[],[]],
										[[],[],[],[],[],[],[],[],[]],
										[[],[],[],[],[],[],[],[],[]],
										[[],[],[],[],[],[],[],[],[]],
										[[],[],[],[],[],[],[],[],[]],
										[[],[],[],[],[],[],[],[],[]],
										[[],[],[],[],[],[],[],[],[]],
										[[],[],[],[],[],[],[],[],[]],
										[[],[],[],[],[],[],[],[],[]]];
				});
				it("does nothing", function(){
					slv.eliminatePairs();
					var target = slv.internalRepr = [[[2,3],[],[],[],[],[],[],[],[]],
													[[],[],[],[],[],[],[],[],[]],
													[[],[],[],[],[],[],[],[],[]],
													[[],[],[],[],[],[],[],[],[]],
													[[],[],[],[],[],[],[],[],[]],
													[[],[],[],[],[],[],[],[],[]],
													[[],[],[],[],[],[],[],[],[]],
													[[],[],[],[],[],[],[],[],[]],
													[[],[],[],[],[],[],[],[],[]]];
					expect(slv.internalRepr).to(array_eq, target);	
				});
			});
			describe('when there is a pair, and it conflicts with nothing', function(){
				before(function(){
					slv.internalRepr = [[[2,3],[],[],[],[],[],[],[],[]],
										[[],[],[],[],[],[],[],[],[]],
										[[],[],[],[],[],[],[],[],[]],
										[[],[],[],[],[],[],[],[],[]],
										[[],[],[],[],[],[],[],[],[]],
										[[],[],[],[],[],[],[],[],[]],
										[[],[],[],[],[],[],[],[],[]],
										[[],[],[],[],[],[],[],[],[]],
										[[],[],[],[],[],[],[],[],[]]];
				});
				it("does nothing", function(){
					slv.eliminatePairs();;
					var target = slv.internalRepr = [[[2,3],[],[],[],[],[],[],[],[]],
										[[],[],[],[],[],[],[],[],[]],
										[[],[],[],[],[],[],[],[],[]],
										[[],[],[],[],[],[],[],[],[]],
										[[],[],[],[],[],[],[],[],[]],
										[[],[],[],[],[],[],[],[],[]],
										[[],[],[],[],[],[],[],[],[]],
										[[],[],[],[],[],[],[],[],[]],
										[[],[],[],[],[],[],[],[],[]]];
					expect(slv.internalRepr).to(array_eq, target);
				});
			});
			describe('when there is more than one pair', function(){
				before(function(){
						slv.internalRepr = [[[2,3],[2,3],[2,3,7],[],[],[],[],[],[]],
											[[],[],[],[],[],[],[],[],[]],
											[[],[],[],[],[],[],[],[],[]],
											[[],[],[],[],[],[],[],[],[]],
											[[],[],[],[],[],[],[],[],[]],
											[[],[],[],[],[],[],[],[],[]],
											[[],[4,5,6],[],[4,5],[4,5],[],[],[],[]],
											[[],[],[],[],[],[],[],[],[]],
											[[],[],[],[],[],[],[],[],[]]];
				});
				it("removes them all", function(){
						slv.eliminatePairs();
						var target = slv.internalRepr = [[[2,3],[2,3],[7],[],[],[],[],[],[]],
											[[],[],[],[],[],[],[],[],[]],
											[[],[],[],[],[],[],[],[],[]],
											[[],[],[],[],[],[],[],[],[]],
											[[],[],[],[],[],[],[],[],[]],
											[[],[],[],[],[],[],[],[],[]],
											[[],[6],[],[4,5],[4,5],[],[],[],[]],
											[[],[],[],[],[],[],[],[],[]],
											[[],[],[],[],[],[],[],[],[]]];
						expect(slv.internalRepr).to(array_eq, target);
				});
			});
			describe('when ther eis more than one triple', function(){
				before(function(){
					slv.internalRepr = [[[2,3,4],[2,3,4],[2,3,4],[2,3,4,5],[],[],[],[],[]],
								[[6,7,8],[6,7,8],[6,7,8],[6,7,8,9],[],[],[],[],[]],
								[[],[],[],[],[],[],[],[],[]],
								[[],[],[],[],[],[],[],[],[]],
								[[],[],[],[],[],[],[],[],[]],
								[[],[],[],[],[],[],[],[],[]],
								[[],[],[],[],[],[],[],[],[]],
								[[],[],[],[],[],[],[],[],[]],
								[[],[],[],[],[],[],[],[],[]]];
				});
				it("removes them all", function(){
					slv.eliminateTriples();
					var target = [[[2,3,4],[2,3,4],[2,3,4],[5],[],[],[],[],[]],
								[[6,7,8],[6,7,8],[6,7,8],[9],[],[],[],[],[]],
								[[],[],[],[],[],[],[],[],[]],
								[[],[],[],[],[],[],[],[],[]],
								[[],[],[],[],[],[],[],[],[]],
								[[],[],[],[],[],[],[],[],[]],
								[[],[],[],[],[],[],[],[],[]],
								[[],[],[],[],[],[],[],[],[]],
								[[],[],[],[],[],[],[],[],[]]];
					expect(slv.internalRepr).to(array_eq, target);
				});
			});
		});
	});
});